{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// API service methods\nconst api = {\n  // Video processing endpoints\n  videos: {\n    async getTranscript(url) {\n      try {\n        const response = await apiClient.post(\"/videos/transcript\", {\n          url\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n    async uploadVideo(file) {\n      try {\n        const formData = new FormData();\n        formData.append(\"video\", file);\n        const response = await apiClient.post(\"/videos/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    }\n  },\n  // AI processing endpoints\n  ai: {\n    async generateSummary(text) {\n      try {\n        const response = await apiClient.post(\"/ai/summary\", {\n          text\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n    async generateFlashcards(text, options = {}) {\n      try {\n        const response = await apiClient.post(\"/ai/flashcards\", {\n          text,\n          ...options\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n    async generateSlides(text, options = {}) {\n      try {\n        const response = await apiClient.post(\"/ai/slides\", {\n          text,\n          options\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n    async generateAnswer(question, context) {\n      try {\n        const response = await apiClient.post(\"/ai/answer\", {\n          question,\n          context\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    }\n  },\n  // Error handling\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error\n      const message = error.response.data.message || \"An error occurred\";\n      return new Error(message);\n    } else if (error.request) {\n      // Request made but no response\n      return new Error(\"No response from server\");\n    } else {\n      // Request setup error\n      return new Error(\"Error setting up request\");\n    }\n  },\n  // Request interceptor\n  setAuthToken(token) {\n    if (token) {\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete apiClient.defaults.headers.common[\"Authorization\"];\n    }\n  }\n};\n\n// Response interceptor\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  // Handle global error responses\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    // You might want to redirect to login or refresh token\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","api","videos","getTranscript","url","response","post","data","error","handleError","uploadVideo","file","formData","FormData","append","ai","generateSummary","text","generateFlashcards","options","generateSlides","generateAnswer","question","context","message","Error","request","setAuthToken","token","defaults","common","interceptors","use","_error$response","status","Promise","reject"],"sources":["/Users/anshtandon/VSCODE Projects/note_gpt/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// API service methods\nconst api = {\n  // Video processing endpoints\n  videos: {\n    async getTranscript(url) {\n      try {\n        const response = await apiClient.post(\"/videos/transcript\", { url });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n\n    async uploadVideo(file) {\n      try {\n        const formData = new FormData();\n        formData.append(\"video\", file);\n\n        const response = await apiClient.post(\"/videos/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n  },\n\n  // AI processing endpoints\n  ai: {\n    async generateSummary(text) {\n      try {\n        const response = await apiClient.post(\"/ai/summary\", { text });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n\n    async generateFlashcards(text, options = {}) {\n      try {\n        const response = await apiClient.post(\"/ai/flashcards\", {\n          text,\n          ...options,\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n\n    async generateSlides(text, options = {}) {\n      try {\n        const response = await apiClient.post(\"/ai/slides\", {\n          text,\n          options,\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n\n    async generateAnswer(question, context) {\n      try {\n        const response = await apiClient.post(\"/ai/answer\", {\n          question,\n          context,\n        });\n        return response.data;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    },\n  },\n\n  // Error handling\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error\n      const message = error.response.data.message || \"An error occurred\";\n      return new Error(message);\n    } else if (error.request) {\n      // Request made but no response\n      return new Error(\"No response from server\");\n    } else {\n      // Request setup error\n      return new Error(\"Error setting up request\");\n    }\n  },\n\n  // Request interceptor\n  setAuthToken(token) {\n    if (token) {\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete apiClient.defaults.headers.common[\"Authorization\"];\n    }\n  },\n};\n\n// Response interceptor\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle global error responses\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      // You might want to redirect to login or refresh token\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}